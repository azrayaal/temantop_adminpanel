<%- include('../../components/header.ejs') %>
<!-- partial -->
<div class="container-fluid page-body-wrapper bg-black">
  <!-- partial:partials/_navbar.html -->
  <%- include('../../components/navbar.ejs') %>
  <!-- partial -->
  <div class="main-panel">
    <div class="content-wrapper">
      <div class="page-header">
        <div class="d-flex align-items-center">
          <h3 class="page-title">
            Transaction Report for <%= username %> (<%= player_id %>)
          </h3>
        </div>

        <nav aria-label="breadcrumb">
          <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="#">Reports</a></li>
            <li class="breadcrumb-item active" aria-current="page">
              Transaction Report
            </li>
          </ol>
        </nav>
      </div>

      <div class="row">
        <div class="card">
          <div class="card-body">
            <div class="d-flex justify-content-between align-items-center mb-4">
              <h4 class="card-title mb-0">Transaction Summary</h4>
              <!-- Filter Bar -->
              <div class="row mb-0">
                <div class="col d-flex justify-content-end">
                  <div class="input-group">
                    <!-- Start Date Input -->
                    <input
                      type="date"
                      id="startDate"
                      name="startDate"
                      class="form-control ml-2"
                    />

                    <!-- End Date Input -->
                    <input
                      type="date"
                      id="endDate"
                      name="endDate"
                      class="form-control ml-2"
                    />

                    <!-- Filter Button -->
                    <button
                      class="btn btn-primary ml-2"
                      onclick="filterByDate()"
                    >
                      Filter
                    </button>
                  </div>
                </div>
              </div>
            </div>

            <div class="table-responsive">
              <table class="table table-bordered">
                <thead>
                  <tr>
                    <th>Total Spend</th>
                    <th>Total Income</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td id="totalSpend">Rp. <%= totalSpend %></td>
                    <td id="totalIncome">Rp. <%= totalIncome %></td>
                  </tr>
                </tbody>
              </table>
              <button id="exportButton" class="btn btn-success mt-2">
                Export
              </button>
            </div>

            <h4 class="mt-5">Transaction Details</h4>
            <div class="table-responsive">
              <table class="table table-bordered" id="transactionTable">
                <thead>
                  <tr>
                    <th>No</th>
                    <th>Gift Name</th>
                    <th>Bet Id</th>
                    <th>Amount Spend</th>
                    <th>Amount Income</th>
                    <th>Description</th>
                    <th onclick="sortTableByDate()" style="cursor: pointer">
                      Date &#x25B2;&#x25BC;
                    </th>
                  </tr>
                </thead>
                <tbody>
                  <% transactions.forEach((transaction, index) => { %>
                  <tr>
                    <td><%= (currentPage - 1) * 10 + index + 1 %></td>
                    <td><%= transaction.giftName %></td>
                    <td><%= transaction.bet_id %></td>
                    <td class="amount-cell">
                      <%= transaction.amountSpend || 0 %>
                    </td>
                    <td class="amount-cell">
                      <%= transaction.amountIncome || 0 %>
                    </td>
                    <td><%= transaction.description %></td>
                    <td>
                      <%= new Date(transaction.createdAt).toLocaleString() %>
                    </td>
                  </tr>
                  <% }) %>
                </tbody>
              </table>
            </div>

            <!-- Pagination Controls -->
            <nav aria-label="Page navigation" style="padding-top: 40px">
              <ul class="pagination justify-content-center">
                <% if (currentPage > 1) { %>
                <li class="page-item">
                  <a
                    class="page-link"
                    href="?page=<%= currentPage - 1 %>"
                    aria-label="Previous"
                  >
                    <span aria-hidden="true">&laquo;</span>
                  </a>
                </li>
                <% } %> <% for (let i = 1; i <= totalPages; i++) { %>
                <li class="page-item <%= i === currentPage ? 'active' : '' %>">
                  <a class="page-link" href="?page=<%= i %>"><%= i %></a>
                </li>
                <% } %> <% if (currentPage < totalPages) { %>
                <li class="page-item">
                  <a
                    class="page-link"
                    href="?page=<%= currentPage + 1 %>"
                    aria-label="Next"
                  >
                    <span aria-hidden="true">&raquo;</span>
                  </a>
                </li>
                <% } %>
              </ul>
            </nav>
          </div>
        </div>
      </div>
    </div>

    <footer class="footer">
      <div class="d-sm-flex justify-content-center justify-content-sm-between">
        <span
          class="text-muted text-center text-sm-left d-block d-sm-inline-block"
        >
          Copyright Â© 2024
          <a href="https://www.bootstrapdash.com/" target="_blank">Yong</a
          >. All rights reserved.
        </span>
      </div>
    </footer>
  </div>
</div>
<!-- partial -->
<%- include('../../components/footer.ejs') %>

<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.0/xlsx.full.min.js"></script>
<script>
  function toIDR(number) {
    return new Intl.NumberFormat("id-ID", {
      style: "currency",
      currency: "IDR",
    }).format(number);
  }

  let sortDirection = false;
  function updateRowNumbers() {
    const table = document.getElementById("transactionTable");
    const rows = Array.from(table.rows).slice(1); // Skip the header row

    let visibleRowIndex = 1; // Start row numbering at 1

    rows.forEach((row) => {
      if (row.style.display !== "none") {
        const numberCell = row.cells[0]; // Assuming the row number is in the first cell (index 0)
        numberCell.innerText = visibleRowIndex; // Set visible row index
        visibleRowIndex++; // Increment the visible row index
      }
    });
  }

  // Fungsi untuk sorting berdasarkan kolom tanggal, tetapi memastikan nomor 1 tetap di atas
  function sortTableByDate() {
    const table = document.getElementById("transactionTable");
    const rows = Array.from(table.rows).slice(1); // Lewati header dan baris pertama (row[0] adalah header, row[1] adalah nomor 1)

    const sortedRows = rows.sort((a, b) => {
      const aDate = new Date(a.cells[6].innerText); // Ambil kolom tanggal di indeks ke-6
      const bDate = new Date(b.cells[6].innerText);

      return sortDirection ? bDate - aDate : aDate - bDate; // Sort berdasarkan arah
    });

    sortDirection = !sortDirection; // Toggle direction

    // Sisipkan kembali baris pertama dan sorted rows ke dalam tabel
    const tableBody = table.tBodies[0];
    const firstRow = table.rows[1]; // Ambil baris pertama (row nomor 1)
    tableBody.innerHTML = ""; // Kosongkan tabel

    tableBody.append(firstRow); // Tambahkan kembali baris pertama
    tableBody.append(...sortedRows); // Tambahkan baris yang sudah diurutkan

    updateRowNumbers(); // Perbarui nomor urut setelah pengurutan
  }

  // Fungsi untuk filter berdasarkan tanggal
  function filterByDate() {
    const startDateInput = document.getElementById("startDate").value;
    const endDateInput = document.getElementById("endDate").value;
    const pagination = document.querySelector(".pagination"); // Mengambil elemen pagination

    // Memastikan kedua tanggal diinput
    if (!startDateInput || !endDateInput) {
      alert("Please select both start and end dates.");
      pagination.style.display = ""; // Tampilkan pagination kembali jika filter dibersihkan
      return; // Menghentikan eksekusi fungsi jika input tidak valid
    }

    let totalSpend = 0; // Inisialisasi variabel total spend
    let totalIncome = 0; // Inisialisasi variabel total income

    const startDate = new Date(startDateInput);
    startDate.setHours(0, 0, 0, 0); // Set start date to 00:00

    const endDate = new Date(endDateInput);
    endDate.setHours(23, 59, 59, 999); // Set end date to 23:59:59

    // Pengecekan apakah end date lebih kecil dari start date
    if (endDate < startDate) {
      alert("End date cannot be earlier than start date."); // Alert jika end date lebih kecil dari start date
      pagination.style.display = ""; // Tampilkan pagination kembali jika filter dibersihkan
      return; // Menghentikan eksekusi fungsi jika tanggal tidak valid
    }

    const table = document.getElementById("transactionTable");
    const rows = Array.from(table.rows).slice(1); // Lewati header
    let hasVisibleRow = false;

    rows.forEach((row) => {
      const dateCell = new Date(row.cells[6].innerText); // Asumsikan kolom tanggal di indeks ke-6
      const amountTextSpend = row.cells[3].innerText.replace(/[^0-9.,-]+/g, "");
      const amountTextIncome = row.cells[4].innerText.replace(
        /[^0-9.,-]+/g,
        ""
      );
      const amountSpend = parseFloat(amountTextSpend.replace(",", "."));
      const amountIncome = parseFloat(amountTextIncome.replace(",", "."));

      // Tampilkan baris hanya jika tanggal berada dalam rentang yang dipilih
      if (dateCell >= startDate && dateCell <= endDate) {
        row.style.display = ""; // Tampilkan baris
        hasVisibleRow = true; // Tandai jika ada baris yang sesuai

        // Hitung total spend dan total income
        totalSpend += amountSpend || 0; // Tambah ke total spend
        totalIncome += amountIncome || 0; // Tambah ke total income
      } else {
        row.style.display = "none"; // Sembunyikan baris
      }
    });

    // Sembunyikan pagination jika ada hasil filter
    if (hasVisibleRow) {
      pagination.style.display = "none"; // Sembunyikan pagination
    } else {
      pagination.style.display = ""; // Tampilkan pagination jika filter dibersihkan
    }

    // Update total spend dan income yang sudah difilter
    document.getElementById("totalSpend").innerText = toIDR(totalSpend);
    document.getElementById("totalIncome").innerText = toIDR(totalIncome);

    updateRowNumbers();
  }

  // Fungsi untuk filter berdasarkan tanggal
  function filterByDate() {
    const startDateInput = document.getElementById("startDate").value;
    const endDateInput = document.getElementById("endDate").value;
    const pagination = document.querySelector(".pagination"); // Mengambil elemen pagination

    // Memastikan kedua tanggal diinput
    if (!startDateInput || !endDateInput) {
      alert("Please select both start and end dates.");
      pagination.style.display = ""; // Tampilkan pagination kembali jika filter dibersihkan
      return; // Menghentikan eksekusi fungsi jika input tidak valid
    }

    let totalSpend = 0; // Inisialisasi variabel total spend
    let totalIncome = 0; // Inisialisasi variabel total income

    const startDate = new Date(startDateInput);
    startDate.setHours(0, 0, 0, 0); // Set start date to 00:00

    const endDate = new Date(endDateInput);
    endDate.setHours(23, 59, 59, 999); // Set end date to 23:59:59

    // Pengecekan apakah end date lebih kecil dari start date
    if (endDate < startDate) {
      alert("End date cannot be earlier than start date."); // Alert jika end date lebih kecil dari start date
      pagination.style.display = ""; // Tampilkan pagination kembali jika filter dibersihkan
      return; // Menghentikan eksekusi fungsi jika tanggal tidak valid
    }

    const table = document.getElementById("transactionTable");
    const rows = Array.from(table.rows).slice(1); // Lewati header
    let hasVisibleRow = false;

    rows.forEach((row) => {
      const dateCell = new Date(row.cells[6].innerText); // Asumsikan kolom tanggal di indeks ke-6
      const amountTextSpend = row.cells[3].innerText.replace(/[^0-9.,-]+/g, "");
      const amountTextIncome = row.cells[4].innerText.replace(
        /[^0-9.,-]+/g,
        ""
      );
      const amountSpend = parseFloat(amountTextSpend.replace(",", "."));
      const amountIncome = parseFloat(amountTextIncome.replace(",", "."));

      // Tampilkan baris hanya jika tanggal berada dalam rentang yang dipilih
      if (dateCell >= startDate && dateCell <= endDate) {
        row.style.display = ""; // Tampilkan baris
        hasVisibleRow = true; // Tandai jika ada baris yang sesuai

        // Hitung total spend dan total income
        totalSpend += amountSpend || 0; // Tambah ke total spend
        totalIncome += amountIncome || 0; // Tambah ke total income
      } else {
        row.style.display = "none"; // Sembunyikan baris
      }
    });

    // Sembunyikan pagination jika ada hasil filter
    if (hasVisibleRow) {
      pagination.style.display = "none"; // Sembunyikan pagination
    } else {
      pagination.style.display = ""; // Tampilkan pagination jika filter dibersihkan
    }

    // Update total spend dan income yang sudah difilter
    document.getElementById("totalSpend").innerText = toIDR(totalSpend);
    document.getElementById("totalIncome").innerText = toIDR(totalIncome);

    updateRowNumbers();
  }

  // Fungsi untuk mengekspor data yang difilter ke Excel dan menambahkan border pada setiap sel
  // Fungsi untuk mengekspor data yang difilter ke Excel dan menambahkan border pada setiap sel
  function exportToExcel() {
    const table = document.getElementById("transactionTable");
    const rows = Array.from(table.querySelectorAll("tbody tr")).filter(
      (row) => row.style.display !== "none" // Hanya ambil baris yang terlihat
    );

    // Get Total Spend and Total Income values from the page
    const totalSpend = document.getElementById("totalSpend").innerText;
    const totalIncome = document.getElementById("totalIncome").innerText;

    // Get player_id and username from the page
    const playerId = "<%= player_id %>"; // Rendered from server
    const username = "<%= username %>"; // Rendered from server

    // Array to store the exported data
    const data = [];

    // Define headers, including player_id and username
    const headers = [
      "No",
      "Player ID",
      "Username",
      "Gift Name",
      "Bet Id",
      "Outcome",
      "Income",
      "Description",
      "Date",
    ];
    data.push(headers); // Add headers to the data array

    // Loop through visible rows and collect data
    rows.forEach((row, index) => {
      const cells = row.querySelectorAll("td");
      const giftName = cells[1].innerText; // Assuming Gift Name is in the second column
      const betId = cells[2].innerText; // Assuming Bet Id is in the third column
      const outcome = cells[3].innerText; // Outcome (Spend) in the fourth column
      const income = cells[4].innerText; // Income in the fifth column
      const description = cells[5].innerText; // Assuming Description is in the sixth column
      const date = cells[6].innerText; // Assuming Date is in the seventh column

      // Push row data into the data array, adding player_id and username
      data.push([
        index + 1,
        playerId,
        username,
        giftName,
        betId,
        outcome,
        income,
        description,
        date,
      ]);
    });

    // Add total row at the end
    data.push(["", "", "", "Total", "", totalSpend, totalIncome, "", ""]);

    // Create the worksheet from the data
    const worksheet = XLSX.utils.aoa_to_sheet(data);

    // Add thicker borders to all cells
    const range = XLSX.utils.decode_range(worksheet["!ref"]);
    for (let R = range.s.r; R <= range.e.r; ++R) {
      for (let C = range.s.c; C <= range.e.c; ++C) {
        const cell = worksheet[XLSX.utils.encode_cell({ r: R, c: C })];
        if (!cell.s) cell.s = {};
        cell.s.border = {
          top: { style: "thick", color: { rgb: "000000" } }, // Thicker borders
          bottom: { style: "thick", color: { rgb: "000000" } },
          left: { style: "thick", color: { rgb: "000000" } },
          right: { style: "thick", color: { rgb: "000000" } },
        };
      }
    }

    // Create a new workbook and append the worksheet
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, "Filtered Transactions");

    // Export the workbook as an Excel file
    XLSX.writeFile(workbook, "filtered_transactions_report.xlsx");
  }

  // Event listener untuk tombol export
  document
    .getElementById("exportButton")
    .addEventListener("click", exportToExcel);

  // Inisialisasi fungsi filter dan sort pada klik tombol
  const amountCells = document.querySelectorAll(".amount-cell");
  amountCells.forEach((cell) => {
    const amount = parseFloat(cell.innerText); // Pastikan nilai amount diubah menjadi angka
    cell.innerText = toIDR(amount); // Format amount menjadi IDR
  });

  // Format total spend dan total income
  const totalSpendElement = document.getElementById("totalSpend");
  const totalIncomeElement = document.getElementById("totalIncome");

  const totalSpendText = totalSpendElement.innerText;
  const totalIncomeText = totalIncomeElement.innerText;

  const totalSpend = parseInt(totalSpendText.replace(/[^0-9]/g, ""), 10);
  const totalIncome = parseInt(totalIncomeText.replace(/[^0-9]/g, ""), 10);

  totalSpendElement.innerText = toIDR(totalSpend);
  totalIncomeElement.innerText = toIDR(totalIncome);
</script>
