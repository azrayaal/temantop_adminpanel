<div class="main-panel">
  <div class="content-wrapper">
    <div class="page-header">
      <div class="d-flex justify-content-between align-items-center">
        <h3 class="page-title">Request Withdraws</h3>
        <h3 class="card-title ms-4">
        </h3>
      </div>
      <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
          <li class="breadcrumb-item active" aria-current="page">withdraw</li>
        </ol>
      </nav>
    </div>
    <%- include ('../../components/messages.ejs')%>
    <div class="row">
      <div class="card">
        <div class="card-body">
          <div class="d-flex justify-content-between align-items-center mb-4">
            <!-- <h4 class="card-title mb-0">Table withdraw</h4> -->
            <input
            type="text"
            id="searchInput"
            class="form-control w-25"
            onkeyup="searchTable()"
            placeholder="Search for user id or username.."
          />
          </div>
          <div class="d-flex justify-content-end mb-3">
            <input
              type="date"
              id="startDate"
              class="form-control me-2 shadow"
              placeholder="Start Date"
            />
            <input
              type="date"
              id="endDate"
              class="form-control me-2 shadow"
              placeholder="End Date"
            />
            <button class="btn btn-primary shadow" onclick="filterByDate()">
              Filter
            </button>
          </div>
          <div class="table-responsive">
            <table class="table table-bordered" id="withdrawTable">
              <thead>
                <tr>
                  <th style="width: 7%">No</th>
                  <th>Request by</th>
                  <th>user id</th>
                  <th>amount</th>
                  <th>Bank Name</th>
                  <th onclick="sortTableByRequestDate()" style="cursor: pointer">
                    Request Date &#x25B2;&#x25BC;
                  </th>                  
                  <th>status</th>
                  <th style="width: 5%;">Actions</th>
                </tr>
              </thead>
              <tbody>
                <% for(let i = 0; i < withdraw.length; i++){ %>
                <tr>
                  <td><%= i + 1 %></td>
                  <td><%= withdraw[i].username %></td>
                  <td><%= withdraw[i].player_id %></td>
                  <td><%= withdraw[i].amount %></td>
                  <td><%= withdraw[i].bank_name %></td>
                  <td><%= new Date(withdraw[i].created_at).toLocaleString("en-US", { hour12: true }) %></td>
                  <td class="form-control 
                  <%=  withdraw[i].status === 'pending' ? 'bg-warning' : '' %>
                  <%=  withdraw[i].status === 'approved' ? 'bg-success' : '' %>
                  <%=  withdraw[i].status === 'rejected' ? 'bg-danger' : '' %>"
                value="<%=  withdraw[i].status %>" ><%= withdraw[i].status %></td>
                  <td>
                    <a
                      href="/admin/withdraw/detail/<%= withdraw[i].id %>"
                      class="btn btn-primary"
                    >
                      <i class="fas fa-pencil-alt"></i> Detail
                    </a>
                  </form>
                  </td>
                </tr>
                <% } %>
              </tbody>
            </table>

            <nav aria-label="Page navigation" style="padding-top: 20px">
              <ul class="pagination justify-content-center">
                <% for (let i = 1; i <= totalPages; i++) { %>
                  <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                    <a class="page-link" href="?page=<%= i %>"><%= i %></a>
                  </li>
                <% } %>
              </ul>
            </nav>
            
          </div>
        </div>
      </div>
    </div>
  </div>
  <footer class="footer">
    <div class="d-sm-flex justify-content-center justify-content-sm-between">
      <span
        class="text-muted text-center text-sm-left d-block d-sm-inline-block"
        >Copyright Â© 2024
        <a href="/" target="_blank">Yong</a>.
        All rights reserved.</span
      >
    </div>
  </footer>
</div>

<style>
  .online {
    color: green;
  }
  .offline {
    color: red;
  }
</style>

<script>
let sortDirection = false; // Initialize sort direction

function sortTableByRequestDate() {
  const table = document.getElementById("withdrawTable");
  const rows = Array.from(table.rows).slice(1); // Skip header row

  // Sort rows based on the Request Date column (index 5)
  const sortedRows = rows.sort((a, b) => {
    const dateA = new Date(a.cells[5].innerText); // Column index 5 for Request Date
    const dateB = new Date(b.cells[5].innerText);

    return sortDirection ? dateB - dateA : dateA - dateB;
  });

  sortDirection = !sortDirection; // Toggle sort direction

  // Clear the table and append sorted rows
  const tableBody = table.tBodies[0];
  tableBody.innerHTML = ""; // Clear existing rows
  tableBody.append(...sortedRows); // Append sorted rows
  updateRowNumbers(); // Update row numbers after sorting
}

function filterByDate() {
  const startDateInput = document.getElementById("startDate").value;
  const endDateInput = document.getElementById("endDate").value;
  const table = document.getElementById("withdrawTable");
  const rows = Array.from(table.rows).slice(1); // Skip header row

  // Parse start and end dates if provided
  const startDate = startDateInput ? new Date(startDateInput) : null;
  const endDate = endDateInput ? new Date(endDateInput) : null;

  rows.forEach((row) => {
    const requestDateText = row.cells[5].innerText;
    const requestDate = new Date(requestDateText);

    // Check if the row should be visible
    let isVisible = true;
    if (startDate && requestDate < startDate) isVisible = false;
    if (endDate) {
      // Set endDate to end of the day (23:59:59) to include that day in filtering
      endDate.setHours(23, 59, 59, 999);
      if (requestDate > endDate) isVisible = false;
    }

    row.style.display = isVisible ? "" : "none"; // Show or hide row
  });

  updateRowNumbers(); // Update row numbers after filtering
}

function updateRowNumbers() {
  const table = document.getElementById("withdrawTable");
  const rows = Array.from(table.rows).slice(1); // Skip header row

  let visibleRowIndex = 1; // Start row numbering from 1

  rows.forEach((row) => {
    if (row.style.display !== "none") { // Only update visible rows
      row.cells[0].innerText = visibleRowIndex; // Set the row number
      visibleRowIndex++; // Increment the visible row index
    }
  });
}

</script>